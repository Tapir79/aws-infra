{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Runtime environment, networking and data store definitions.",
    "Parameters": {
        "DelphiKeyName": {
            "Description": "The EC2 Key Pair to allow SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "BastionInstanceType": {
            "Description": "Bastion EC2 instance type",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [ "t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "RDSUsername": {
            "Description": "RDS master user name",
            "Type": "String",
            "MinLength": "1",
            "ConstraintDescription": "Master user name cannot be empty"
        },
        "RDSPassword": {
            "Description": "RDS master user password",
            "Type": "String",
            "MinLength": "1",
            "NoEcho": "true",
            "ConstraintDescription": "Master user password cannot be empty"
        },
        "RDSInstanceType": {
            "Description": "RDS instance type",
            "Type": "String",
            "Default": "db.t2.micro",
            "AllowedValues": [
                "db.m4.large",
                "db.m4.xlarge",
                "db.m4.2xlarge",
                "db.m4.4xlarge",
                "db.m4.10xlarge",
                "db.r3.large",
                "db.r3.xlarge",
                "db.r3.2xlarge",
                "db.r3.4xlarge",
                "db.r3.8xlarge",
                "db.t2.micro",
                "db.t2.small",
                "db.t2.medium",
                "db.t2.large"
            ],
            "ConstraintDescription": "must be a valid RDS instance type."
        }
    },
    "Resources": {
        "DelphiVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.1.0.0/16",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC"
                    }
                ]
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DelphiVPC"
                },
                "AvailabilityZone": "eu-west-1a",
                "CidrBlock": "10.1.1.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - Subnet 1A"
                    }
                ]
            }
        },
        "Subnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DelphiVPC"
                },
                "AvailabilityZone": "eu-west-1b",
                "CidrBlock": "10.1.2.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - Subnet 1B"
                    }
                ]
            }
        },
        "Subnet3": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "DelphiVPC"
                },
                "AvailabilityZone": "eu-west-1c",
                "CidrBlock": "10.1.3.0/24",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - Subnet 1C"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - IG"
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "DelphiVPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "DelphiVPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - Route table"
                    }
                ]
            }
        },
        "Route": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "Subnet1" },
                "RouteTableId": { "Ref": "RouteTable" }
            }
        },
        "Subnet2RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "Subnet2" },
                "RouteTableId": { "Ref": "RouteTable" }
            }
        },
        "Subnet3RouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": { "Ref": "Subnet3" },
                "RouteTableId": { "Ref": "RouteTable" }
            }
        },
        "DelphiSG": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "DelphiVPC"
                },
                "GroupDescription": "Whitelisting SecurityGroup",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "5432",
                        "ToPort": "5432",
                        "CidrIp": {
                            "Fn::GetAtt": [ "DelphiVPC", "CidrBlock" ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Fn::GetAtt": [ "DelphiVPC", "CidrBlock" ]
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "194.100.27.17/32"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "188.117.22.59/32"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "213.214.136.59/32"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - Whitelisting SG"
                    }
                ]
            }
        },
        "RDSSubnet": {
            "Type" : "AWS::RDS::DBSubnetGroup",
            "Properties" : {
                "DBSubnetGroupDescription" : "DB Subnet for placing RDS instances inside the VPC. Requires at least two subnets due to enforced HA",
                "SubnetIds" : [ { "Ref" : "Subnet1" }, { "Ref" : "Subnet2" }, { "Ref" : "Subnet3" }  ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - RDS Subnets"
                    }
               ]
            }
         },
        "ExampleRDS": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": "ExampleRDS",
                "AllocatedStorage": "10",
                "DBInstanceClass": {
                    "Ref": "RDSInstanceType"
                },
                "Engine": "postgres",
                "EngineVersion": "9.6.2",
                "MasterUsername": { "Ref": "RDSUsername" },
                "MasterUserPassword": { "Ref": "RDSPassword" },
                "DBSubnetGroupName": { "Ref": "RDSSubnet" },
                "VPCSecurityGroups": [
                    { "Fn::GetAtt": ["DelphiSG", "GroupId"] }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "DelphiVPC - Example RDS"
                    }
                ]
            }
        },
        "ExampleS3": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "AccessControl": "Private",
                "BucketName": "kirapythia-example-bucket"
            }
        },
        "DockerRegistry": {
            "Type" : "AWS::ECR::Repository",
            "Properties" : {
                "RepositoryName" : "pythia-qa-registry"
            }
        },
        "BastionIPAddress": {
            "Type": "AWS::EC2::EIP",
            "DependsOn": "AttachGateway",
            "Properties": {
                "Domain": "vpc",
                "InstanceId": {
                    "Ref": "BastionEC2Instance"
                }
            }
        },
        "BastionEC2Instance": {
            "Type": "AWS::EC2::Instance",
            "DependsOn": "AttachGateway",
            "Properties": {
                "KeyName": {
                    "Ref": "DelphiKeyName"
                },
                "ImageId": "ami-0d063c6b",
                "InstanceType": {
                    "Ref": "BastionInstanceType"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    },
                    {
                        "Key": "Name",
                        "Value": "Pythia VPC Bastion host"
                    },
                    {
                        "Key": "Purpose",
                        "Value": "Bastion"
                    },
                    {
                        "Key": "Environment",
                        "Value": "Support"
                    }
                ],
                "NetworkInterfaces": [
                    {
                        "GroupSet": [
                            {
                                "Ref": "DelphiSG"
                            }
                        ],
                        "AssociatePublicIpAddress": "true",
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true",
                        "SubnetId": {
                            "Ref": "Subnet1"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "BastionHostIP": {
            "Value": {
                "Fn::GetAtt": [
                    "BastionEC2Instance",
                    "PublicIp"
                ]
            },
            "Description": "Bastion host IP, use this for SSH"
        },
        "ExampleRDSIP": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        { "Fn::GetAtt": [ "ExampleRDS", "Endpoint.Address" ] },
                        ":",
                        { "Fn::GetAtt": [ "ExampleRDS", "Endpoint.Port" ] }
                    ]
                ]
            },
            "Description": "Example RDS instance connection URI"
        },
        "S3ExampleBucketURL" : {
            "Value" : { "Fn::Join" : [ "", [ "https://", { "Fn::GetAtt" : [ "ExampleS3", "DomainName" ] } ] ] },
            "Description" : "Example S3 bucket URL"
        },
        "ECR": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        { "Ref": "AWS::AccountId" },
                        ".dkr.ecr.eu-west-1.amazonaws.com/",
                        { "Ref" : "DockerRegistry" }
                    ]
                ]
            },
            "Description": "ECR registry base URI"
        }
    }
}
